cmake_minimum_required(VERSION 3.10)
project(PGCCHIB)

# Define o padrão do C++
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Ativa o FetchContent
include(FetchContent)

# Configura o FetchContent para baixar e compilar dependências
FetchContent_Declare(
  glfw
  GIT_REPOSITORY https://github.com/glfw/glfw.git
  GIT_TAG 3.4
)
FetchContent_Declare(
  glm
  GIT_REPOSITORY https://github.com/g-truc/glm.git
  GIT_TAG master
)
FetchContent_Declare(
  stb_image
  GIT_REPOSITORY https://github.com/nothings/stb.git
  GIT_TAG master
)
FetchContent_MakeAvailable(glfw glm stb_image)

# Adiciona as pastas de cabeçalhos globais
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_SOURCE_DIR}/common)
include_directories(${CMAKE_SOURCE_DIR}/include/glad)
include_directories(${glm_SOURCE_DIR})

# Lista de exemplos/exercícios (apenas o seu está ativo)
set(EXERCISES
    AtividadeVivencialM6/AtividadeVivencialM6
    # ExemplosMoodle/M1_material/exemplo_00
    # ExemplosMoodle/M1_material/exemplo_01
    # ExemplosMoodle/M2_material/exemplo_02
    # ExemplosMoodle/M3_material/exemplo_03
    # ExemplosMoodle/M4_material/exemplo_04
    # HelloTriangle
    # HelloTransform
    # HelloTexture
    # HelloSprite
    # HelloAnimatedSprite
    # HelloIsometricTilemap
    # Modulo2/Ex1Parte1M2
    # Modulo2/Ex1Parte2M2
    # Modulo3/M3JogoCores
)

add_compile_options(-Wno-pragmas)

# Define as bibliotecas de sistema operacional
if(WIN32)
    set(OPENGL_LIBS opengl32)
elseif(APPLE)
    find_library(OpenGL_LIBRARY OpenGL)
    set(OPENGL_LIBS ${OpenGL_LIBRARY})
else()
    find_package(OpenGL REQUIRED)
    set(OPENGL_LIBS ${OPENGL_gl_LIBRARY})
endif()

# Caminho para glad.c
set(GLAD_C_FILE "${CMAKE_SOURCE_DIR}/common/glad.c")
if (NOT EXISTS ${GLAD_C_FILE})
    message(FATAL_ERROR "Arquivo glad.c não encontrado!")
endif()

# Cria os executáveis
foreach(EXERCISE ${EXERCISES})
    get_filename_component(EXE_NAME ${EXERCISE} NAME)
    get_filename_component(EXERCISE_DIR ${EXERCISE} DIRECTORY)
    
    set(EXERCISE_SOURCES
        "src/${EXERCISE}.cpp"
        "src/${EXERCISE_DIR}/gl_utils.cpp"
        "src/${EXERCISE_DIR}/TileMap.cpp"
        "src/${EXERCISE_DIR}/TilemapView.cpp"
        "src/${EXERCISE_DIR}/DiamondView.cpp"
        "src/${EXERCISE_DIR}/ltMath.cpp"
        ${GLAD_C_FILE}
    )

    add_executable(${EXE_NAME} ${EXERCISE_SOURCES})

    target_include_directories(${EXE_NAME} PRIVATE
        "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}"
        "${CMAKE_SOURCE_DIR}/common"
        ${CMAKE_SOURCE_DIR}/include/glad
        ${glm_SOURCE_DIR}
        ${stb_image_SOURCE_DIR}
    )
    target_link_libraries(${EXE_NAME} glfw ${OPENGL_LIBS} glm::glm)

    # --- ALTERAÇÃO FINAL ADICIONADA AQUI ---
    # Comando para copiar os arquivos de recurso para a pasta de build
     # Comando para copiar os arquivos de recurso para a pasta de build
    add_custom_command(
        TARGET ${EXE_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}/terrain.png"
            $<TARGET_FILE_DIR:${EXE_NAME}>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}/terrain1.tmap"
            $<TARGET_FILE_DIR:${EXE_NAME}>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}/_geral_fs.glsl"
            $<TARGET_FILE_DIR:${EXE_NAME}>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}/_geral_vs.glsl"
            $<TARGET_FILE_DIR:${EXE_NAME}>
        # --- LINHA NOVA PARA O PLAYER ---
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/${EXERCISE_DIR}/player.png"
            $<TARGET_FILE_DIR:${EXE_NAME}>
        COMMENT "Copiando arquivos de recurso para a pasta de build..."
    )

    

endforeach()